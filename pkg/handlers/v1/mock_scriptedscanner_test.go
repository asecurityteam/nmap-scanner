// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/asecurityteam/nmap-scanner/pkg/domain (interfaces: ScriptedScanner)

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	domain "github.com/asecurityteam/nmap-scanner/pkg/domain"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockScriptedScanner is a mock of ScriptedScanner interface
type MockScriptedScanner struct {
	ctrl     *gomock.Controller
	recorder *MockScriptedScannerMockRecorder
}

// MockScriptedScannerMockRecorder is the mock recorder for MockScriptedScanner
type MockScriptedScannerMockRecorder struct {
	mock *MockScriptedScanner
}

// NewMockScriptedScanner creates a new mock instance
func NewMockScriptedScanner(ctrl *gomock.Controller) *MockScriptedScanner {
	mock := &MockScriptedScanner{ctrl: ctrl}
	mock.recorder = &MockScriptedScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScriptedScanner) EXPECT() *MockScriptedScannerMockRecorder {
	return m.recorder
}

// ScanWithScripts mocks base method
func (m *MockScriptedScanner) ScanWithScripts(arg0 context.Context, arg1, arg2 []string, arg3 string) ([]domain.Finding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanWithScripts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]domain.Finding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanWithScripts indicates an expected call of ScanWithScripts
func (mr *MockScriptedScannerMockRecorder) ScanWithScripts(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanWithScripts", reflect.TypeOf((*MockScriptedScanner)(nil).ScanWithScripts), arg0, arg1, arg2, arg3)
}
