// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/asecurityteam/nmap-scanner/pkg/scanner (interfaces: CommandMaker)

// Package scanner is a generated GoMock package.
package scanner

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCommandMaker is a mock of CommandMaker interface
type MockCommandMaker struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMakerMockRecorder
}

// MockCommandMakerMockRecorder is the mock recorder for MockCommandMaker
type MockCommandMakerMockRecorder struct {
	mock *MockCommandMaker
}

// NewMockCommandMaker creates a new mock instance
func NewMockCommandMaker(ctrl *gomock.Controller) *MockCommandMaker {
	mock := &MockCommandMaker{ctrl: ctrl}
	mock.recorder = &MockCommandMakerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommandMaker) EXPECT() *MockCommandMakerMockRecorder {
	return m.recorder
}

// MakeCommand mocks base method
func (m *MockCommandMaker) MakeCommand(arg0 context.Context, arg1 string, arg2 ...string) CommandRunner {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MakeCommand", varargs...)
	ret0, _ := ret[0].(CommandRunner)
	return ret0
}

// MakeCommand indicates an expected call of MakeCommand
func (mr *MockCommandMakerMockRecorder) MakeCommand(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeCommand", reflect.TypeOf((*MockCommandMaker)(nil).MakeCommand), varargs...)
}
