openapi: 3.0.0
x-runtime:
  httpserver:
    address: ":8080"
  logger:
    level: "INFO"
    output: "STDOUT"
  stats:
    output: "NULL"
  signals:
    installed:
      - "OS"
    os:
      signals:
        - 2 # SIGINT
        - 15 # SIGTERM
  connstate:
    reportinterval: "5s"
    hijackedcounter: "http.server.connstate.hijacked"
    closedcounter: "http.server.connstate.closed"
    idlegauge: "http.server.connstate.idle.gauge"
    idlecounter: "http.server.connstate.idle"
    activegauge: "http.server.connstate.active.gauge"
    activecounter: "http.server.connstate.active"
    newgauge: "http.server.connstate.new.gauge"
    newcounter: "http.server.connstate.new"
x-transportd:
  backends:
    - app
  app:
    host: http://app:8081
    pool:
      ttl: "24h"
      count: 1
info:
  version: 1.0.0
  title: "nmap-scanner"
  description: "A service that runs nmap scripts"
  contact:
    name: Security Development
    email: secdev-external@atlassian.com
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /healthcheck:
    get:
      description: "Liveness check."
      responses:
        "200":
          description: "Success."
      x-transportd:
        backend: app
  /scan:
    post:
      description: Scan a host and wait for the results
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanRequest'
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanResult'
        "404":
          description: "Scan target not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-transportd:
        backend: app
        enabled:
          - "accesslog"
          - "requestvalidation"
          - "responsevalidation"
          - "lambda"
        lambda:
          arn: "scan"
          async: false
          request: '#! json .Request.Body !#'
          success: '{"status": 200, "body": {"findings": #! json .Response.Body !#}}'
          error: >
            #! if eq .Response.Body.errorType "NotFoundError" !#
            {"status": 404, "bodyPassthrough": true}
            #! else !#
            {"status": 500, "bodyPassthrough": true}
            #! end !#
  /results/{resultId}:
    get:
      description: Check the results of a job
      parameters:
        - name: "resultId"
          in: "path"
          description: "The identifier of the job to check"
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "The job is in progress"
        "404":
          description: "The job status does not exist."
        "200":
          description: "The job is complete"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Finding'
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-transportd:
        backend: app
        enabled:
          - "accesslog"
          - "requestvalidation"
          - "responsevalidation"
          - "lambda"
        lambda:
          arn: "results"
          async: false
          request: '{"id": "#! .Request.URL.resultId !#"}'
          success: >
            #! if eq .Response.Body.status "IN_PROGRESS" !#
            {"status":204}
            #! else if eq .Response.Body.status "UNKNOWN" !#
            {"status":404}
            #! else if eq .Response.Body.status "READY" !#
            {"status":200,"body": {"findings": #! json .Response.Body.findings !#}
            #! end !#
          error: '{"status": 500, "bodyPassthrough": true}'
  /schedule:
    post:
      description: Schedule a host to be scanned
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanRequest'
      responses:
        "202":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanScheduleResponse'
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-transportd:
        backend: app
        enabled:
          - "accesslog"
          - "requestvalidation"
          - "responsevalidation"
          - "lambda"
        lambda:
          arn: "schedule"
          async: false
          request: '#! json .Request.Body !#'
          success: '{"status": 200, "bodyPassthrough": true}'
          error: '{"status": 400, "bodyPassthrough": true}'
components:
  schemas:
    Finding:
      type: object
      properties:
        timestamp:
          type: string
          description: The time at which the scan was performed.
        ip:
          type: string
          description: The IP address scanned
        hostnames:
          type: array
          items:
            type: string
          description: Any known hostnames associated with the IP
        vulnerabilities:
          type: array
          items:
            $ref: '#/components/schemas/Vulnerability'
    Vulnerability:
      type: object
      properties:
        key:
          type: string
          description: Unique identity of the vulnerability as reported by nmap.
        title:
          type: string
          description: Name of the vulnerability.
        state:
          type: string
          description: >
            An indicator of whether the scanned system(s) are
            vulnerable to this known vulnerability. Possible values
            are:

            - LIKELY VULNERABLE

            - NOT VULNERABLE

            - VULNERABLE

            - VULNERABLE (DoS)

            - VULNERABLE (Exploitable)

            - UNKNOWN (unable to test)
        ids:
          type: array
          items:
            $ref: '#/components/schemas/VulnerabilityID'
          description: Any known database identifiers for the vulnerability.
        riskFactor:
          type: string
          description: >
            A rating of how bad the vulnerability is. This is
            different from a CVSS style score and is a more human
            friendly value. Possible values are:

            - HIGH

            - MEDIUM

            - LOW
        scores:
          type: array
          items:
            $ref: '#/components/schemas/VulnerabilityScore'
          description: Any scores assigned to the vulnerability.
        description:
          type: string
          description: The long form description of the vulnerability.
        dates:
          type: array
          items:
            $ref: '#/components/schemas/VulnerabilityDate'
          description: Key dates associated with the vulnerability.
        checkResults:
          type: array
          items:
            type: string
          description: Any output relevant to the scan or probe that might help diagnose or confirm the vulnerability state.
        exploitResults:
          type: array
          items:
            type: string
          description: Any output gathered during an exploit of a system.
        extraInfo:
          type: array
          items:
            type: string
          description:  Any arbitrary content from a scan or probe that does not fit into other categories.
        references:
          type: array
          items:
            type: string
          description: External links to vulnerability databases or pages that contain additional content about the vulnerability.
        source:
          type: string
          description: The script that detected the vulnerability.
        port:
          type: integer
          description: The port on which the vulnerability is detected.
        protocol:
          type: string
          description: The network protocol used to detect the vulnerability.
        service:
          type: string
          description: The service runing on the vulnerable port.
    VulnerabilityID:
      type: object
      properties:
        type:
          type: string
          description: The kind of ID. Examples are CVE and OSVDB.
        value:
          type: string
          description: The ID of the vulnerability.
    VulnerabilityScore:
      type: object
      properties:
        type:
          type: string
          description: The kind of score. Examples are CVSS and CVSSv2.
        value:
          type: string
          description: The score of the vulnerability.
    VulnerabilityDate:
      type: object
      properties:
        type:
          type: string
          description: The kind of date. Usually "disclosure".
        year:
          type: integer
        month:
          type: integer
        day:
          type: integer
    ScanRequest:
      type: object
      required:
        - host
      properties:
        host:
          type: string
          description: The hostname or IP to scan.
    ScanResult:
      type: object
      properties:
        findings:
          type: array
          items:
            $ref: '#/components/schemas/Finding'
    ScanScheduleResponse:
      type: object
      properties:
        id:
          type: string
          description: A unique identifier for the job.
        href:
          type: string
          description: The URL to poll for status.
    Error:
      type: object
      properties:
        errorMessage:
          type: string
          description: The error message.
        errorType:
          type: string
          description: The error type.
        stackTrace:
          type: array
          description: The stack trace output, if any.
          items:
            type: string
